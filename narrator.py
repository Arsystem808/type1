# narrator.py
from dataclasses import asdict, is_dataclass

def _as_dict(dec):
    if isinstance(dec, dict):
        return dec
    if is_dataclass(dec):
        return asdict(dec)
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–æ–¥–¥–µ—Ä–∂–∏–º "–æ–±—ä–µ–∫—Ç-–ø–æ–¥-—Å–ª–æ–≤–∞—Ä—å"
    try:
        return dict(dec)
    except Exception:
        return {"stance": "WAIT"}

def _fmt_range(r):
    if not r or r[0] is None or r[1] is None:
        return "‚Äî"
    a, b = float(r[0]), float(r[1])
    if abs(a-b) < 1e-6:  # –ø–æ—á—Ç–∏ —Ç–æ—á–∫–∞
        return f"{a:,.2f}"
    return f"{a:,.2f}‚Ä¶{b:,.2f}"

def _fmt_num(x):
    return "‚Äî" if x is None else f"{float(x):,.2f}"

def humanize(ticker: str, decision) -> str:
    d = _as_dict(decision)
    stance = (d.get("stance") or "").upper()
    entry = d.get("entry") or d.get("entry_range")
    t1 = d.get("target1") or (d.get("targets") or (None, None))[0]
    t2 = d.get("target2") or (d.get("targets") or (None, None))[1]
    stop = d.get("stop")
    alt  = d.get("alt")   # –¥–æ–ø—É—Å—Ç–∏–º, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–Ω—É—Ç—Ä—å —Å–ª–æ–≤–∞—Ä—è

    # –ë–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—è.
    if stance == "WAIT":
        return (f"üß† {ticker} ‚Äî —Å–µ–π—á–∞—Å –≤—ã–≥–æ–¥–Ω–µ–µ –ø–æ–¥–æ–∂–¥–∞—Ç—å. "
                f"–ù–∞ —Ç–µ–∫—É—â–∏—Ö —É—Ä–æ–≤–Ω—è—Ö —è–≤–Ω–æ–≥–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–µ—Ç ‚Äî –∂–¥—ë–º –æ—Ç–∫–∞—Ç –∫ –æ–ø–æ—Ä–µ "
                f"–∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞.")

    side = "LONG" if stance == "BUY" else "SHORT"
    lines = []
    lines.append(f"üéØ {ticker} ‚Äî —Å—Ü–µ–Ω–∞—Ä–∏–π: {side}. "
                 f"–í—Ö–æ–¥: {_fmt_range(entry)} | –¶–µ–ª–∏: {_fmt_num(t1)} / {_fmt_num(t2)} | "
                 f"–ó–∞—â–∏—Ç–∞: {_fmt_num(stop)}.")

    if alt:
        # –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∂–µ ‚Äú–æ–±–µ–∑–ª–∏—á–µ–Ω–∞‚Äù –≤ core_strategy
        lines.append(f"ü§ù –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: {alt}")

    # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ–≥–æ–≤–æ—Ä–∫–∞ –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    lines.append("–†–∞–±–æ—Ç–∞–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ: –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –ª–æ–º–∞–µ—Ç—Å—è ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏ –∂–¥—ë–º –Ω–æ–≤—É—é —Ñ–æ—Ä–º–∞—Ü–∏—é.")
    return " ".join(lines)
