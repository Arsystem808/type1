# app.py
# Streamlit UI –¥–ª—è Capintel-Q (Polygon). –°–æ–≤–º–µ—Å—Ç–∏–º —Å Python 3.11‚Äì3.12.
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ core_strategy.py —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç:
#   from narrator import Decision, Stance
#   def analyze_ticker(ticker: str, horizon: str) -> Decision

import os
import traceback
import streamlit as st

from core_strategy import analyze_ticker  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Decision-–æ–±—ä–µ–∫—Ç

# -----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ UI
# -----------------------------
st.set_page_config(
    page_title="Capintel-Q ‚Äî –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤ (Polygon)",
    page_icon="üìä",
    layout="centered",
)

st.markdown(
    "<h1 style='margin-bottom:0'>CapintelL-Q ‚Äî –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–æ–≤ (Polygon)</h1>"
    "<div style='opacity:.7'>–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: Polygon.io ¬∑ –í —Ç–µ–∫—Å—Ç–µ ‚Äî —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—è (–≤—Ö–æ–¥/—Ü–µ–ª–∏/—Å—Ç–æ–ø/–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞). "
    "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –∏ —Ä–∞—Å—á—ë—Ç—ã —Å–∫—Ä—ã—Ç—ã.</div>",
    unsafe_allow_html=True,
)

# –ü—Ä–æ–≤–µ—Ä–∏–º –∫–ª—é—á Polygon (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ UI, –Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º)
if not os.getenv("POLYGON_API_KEY"):
    st.warning(
        "–ù–µ –Ω–∞–π–¥–µ–Ω POLYGON_API_KEY –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏. –î–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è. "
        "–î–æ–±–∞–≤—å —Å–µ–∫—Ä–µ—Ç –≤ Streamlit ‚Üí Settings ‚Üí Secrets."
    )

# -----------------------------
# –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# -----------------------------
ticker = st.text_input(
    "–¢–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, QQQ, AAPL, X:BTCUSD)",
    value="QQQ",
).strip().upper()

horizon_label = st.selectbox(
    "–ì–æ—Ä–∏–∑–æ–Ω—Ç:",
    ["–¢—Ä–µ–π–¥ (1‚Äì5 –¥–Ω–µ–π)", "–°—Ä–µ–¥–Ω–µ—Å—Ä–æ–∫ (1‚Äì4 –Ω–µ–¥–µ–ª–∏)", "–î–æ–ª–≥–æ—Å—Ä–æ–∫ (1‚Äì6 –º–µ—Å—è—Ü–µ–≤)"],
    index=1,
)

HMAP = {
    "–¢—Ä–µ–π–¥ (1‚Äì5 –¥–Ω–µ–π)": "short",
    "–°—Ä–µ–¥–Ω–µ—Å—Ä–æ–∫ (1‚Äì4 –Ω–µ–¥–µ–ª–∏)": "mid",
    "–î–æ–ª–≥–æ—Å—Ä–æ–∫ (1‚Äì6 –º–µ—Å—è—Ü–µ–≤)": "long",
}
horizon = HMAP[horizon_label]

run = st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", type="primary")

# -----------------------------
# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
# -----------------------------
def render_decision(res):
    """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–µ—Å—Ç–∏ Decision-–æ–±—ä–µ–∫—Ç –±–µ–∑ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏."""
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω–æ–π
    st.subheader(f"{res.ticker} ‚Äî —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${res.price:,.2f}")

    # –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫: —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ —Ç–µ–∫—Å—Ç-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    st.markdown("### üß† –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∂–µ 'human-style' –∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    st.write(res.comment)

    # –õ–µ–Ω—Ç–∞ –¥–µ–π—Å—Ç–≤–∏–π (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
    info_lines = []
    if res.entry and isinstance(res.entry, (tuple, list)) and len(res.entry) == 2:
        info_lines.append(f"üéØ **–í—Ö–æ–¥:** {res.entry[0]:.2f} ‚Ä¶ {res.entry[1]:.2f}")
    if res.target1:
        info_lines.append(f"üéØ **–¶–µ–ª—å 1:** {res.target1:.2f}")
    if res.target2:
        info_lines.append(f"üéØ **–¶–µ–ª—å 2:** {res.target2:.2f}")
    if res.stop:
        info_lines.append(f"üõ°Ô∏è **–°—Ç–æ–ø/–∑–∞—â–∏—Ç–∞:** {res.stop:.2f}")
    if info_lines:
        st.markdown("\n\n".join(info_lines))

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–º–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ/—É—Ä–æ–≤–Ω–∏), —Å–∫—Ä—ã—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    with st.expander("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (—É—Ä–æ–≤–Ω–∏ –∏ –º–µ—Ç–∞)"):
        # res.meta ‚Äî —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –ª—é–±—ã–º–∏ —Ç–µ—Ö. –ø–æ–ª—è–º–∏ (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        try:
            st.json(res.meta)
        except Exception:
            st.write(res.meta)

if run:
    if not ticker:
        st.error("–£–∫–∞–∂–∏ —Ç–∏–∫–µ—Ä.")
    else:
        try:
            res = analyze_ticker(ticker, horizon=horizon)  # <-- –í–û–ó–í–†–ê–©–ê–ï–¢ Decision
            # –≤–Ω—É—Ç—Ä–∏ app.py –ø–æ—Å–ª–µ analyze_ticker(...)
d = analyze_ticker(ticker, horizon_key)

st.subheader(f"{d.ticker} ‚Äî —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${d.price:,.2f}")
st.markdown("### üß† –†–µ–∑—É–ª—å—Ç–∞—Ç:")
st.write(f"**–°—Ü–µ–Ω–∞—Ä–∏–π:** {d.stance} ¬∑ **–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {d.confidence}%")
st.write(d.comment)

if d.entry:
    st.write(f"üéØ **–í—Ö–æ–¥:** {d.entry[0]:.2f} ‚Ä¶ {d.entry[1]:.2f}")
if d.target1: st.write(f"üéØ **–¶–µ–ª—å 1:** {d.target1:.2f}")
if d.target2: st.write(f"üéØ **–¶–µ–ª—å 2:** {d.target2:.2f}")
if d.stop:    st.write(f"üõ°Ô∏è **–°—Ç–æ–ø/–∑–∞—â–∏—Ç–∞:** {d.stop:.2f}")

with st.expander("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è)"):
    st.json(d.meta)

                st.code("".join(traceback.format_exc()))

# -----------------------------
# (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π) –±–ª–æ–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ ‚Äî –∑–∞–≥–ª—É—à–∫–∞
# -----------------------------
st.markdown("---")
st.caption("üìà –ë—ç–∫—Ç–µ—Å—Ç (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ) ‚Äî –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ –µ—Å—Ç—å run_backtest().")

try:
    from core_strategy import run_backtest  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

    years = st.slider("–ü–µ—Ä–∏–æ–¥, –ª–µ—Ç:", 1, 5, 3)
    start_capital = st.number_input("–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª, $", value=100000.0, min_value=1000.0, step=1000.0, format="%.2f")
    fee_bps = st.number_input("–ö–æ–º–∏—Å—Å–∏—è, –±.–ø. (–≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã)", value=5.0, min_value=0.0, step=0.5, format="%.2f")

    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç"):
        try:
            bt = run_backtest(
                ticker=ticker or "QQQ",
                horizon=horizon,
                years=years,
                start_capital=start_capital,
                fee_bps=fee_bps,
            )
            # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ bt ‚Äî dict —Å –ø–æ–ª—è–º–∏ summary/curve/trades –∏ —Ç.–ø.
            st.success("–ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
            if isinstance(bt, dict):
                if "summary" in bt:
                    st.subheader("–ò—Ç–æ–≥–∏")
                    st.json(bt["summary"])
                if "trades" in bt:
                    st.subheader("–°–¥–µ–ª–∫–∏")
                    st.dataframe(bt["trades"])
                if "equity" in bt:
                    st.subheader("Equity (—Å–∏–Ω—Ç–µ—Ç–∏–∫–∞)")
                    st.line_chart(bt["equity"])
            else:
                st.write(bt)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
            with st.expander("–°—Ç–µ–∫ –æ—à–∏–±–∫–∏ (–±—ç–∫—Ç–µ—Å—Ç)"):
                st.code("".join(traceback.format_exc()))
except Exception:
    # –ï—Å–ª–∏ run_backtest –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    pass
